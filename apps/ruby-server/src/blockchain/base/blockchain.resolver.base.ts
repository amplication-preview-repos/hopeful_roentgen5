/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Blockchain } from "./Blockchain";
import { BlockchainCountArgs } from "./BlockchainCountArgs";
import { BlockchainFindManyArgs } from "./BlockchainFindManyArgs";
import { BlockchainFindUniqueArgs } from "./BlockchainFindUniqueArgs";
import { CreateBlockchainArgs } from "./CreateBlockchainArgs";
import { UpdateBlockchainArgs } from "./UpdateBlockchainArgs";
import { DeleteBlockchainArgs } from "./DeleteBlockchainArgs";
import { BlockchainService } from "../blockchain.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Blockchain)
export class BlockchainResolverBase {
  constructor(
    protected readonly service: BlockchainService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Blockchain",
    action: "read",
    possession: "any",
  })
  async _blockchainsMeta(
    @graphql.Args() args: BlockchainCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Blockchain])
  @nestAccessControl.UseRoles({
    resource: "Blockchain",
    action: "read",
    possession: "any",
  })
  async blockchains(
    @graphql.Args() args: BlockchainFindManyArgs
  ): Promise<Blockchain[]> {
    return this.service.blockchains(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Blockchain, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Blockchain",
    action: "read",
    possession: "own",
  })
  async blockchain(
    @graphql.Args() args: BlockchainFindUniqueArgs
  ): Promise<Blockchain | null> {
    const result = await this.service.blockchain(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Blockchain)
  @nestAccessControl.UseRoles({
    resource: "Blockchain",
    action: "create",
    possession: "any",
  })
  async createBlockchain(
    @graphql.Args() args: CreateBlockchainArgs
  ): Promise<Blockchain> {
    return await this.service.createBlockchain({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Blockchain)
  @nestAccessControl.UseRoles({
    resource: "Blockchain",
    action: "update",
    possession: "any",
  })
  async updateBlockchain(
    @graphql.Args() args: UpdateBlockchainArgs
  ): Promise<Blockchain | null> {
    try {
      return await this.service.updateBlockchain({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Blockchain)
  @nestAccessControl.UseRoles({
    resource: "Blockchain",
    action: "delete",
    possession: "any",
  })
  async deleteBlockchain(
    @graphql.Args() args: DeleteBlockchainArgs
  ): Promise<Blockchain | null> {
    try {
      return await this.service.deleteBlockchain(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
