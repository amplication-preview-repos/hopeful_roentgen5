/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PeerCommunication as PrismaPeerCommunication,
} from "@prisma/client";

export class PeerCommunicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PeerCommunicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.peerCommunication.count(args);
  }

  async peerCommunications(
    args: Prisma.PeerCommunicationFindManyArgs
  ): Promise<PrismaPeerCommunication[]> {
    return this.prisma.peerCommunication.findMany(args);
  }
  async peerCommunication(
    args: Prisma.PeerCommunicationFindUniqueArgs
  ): Promise<PrismaPeerCommunication | null> {
    return this.prisma.peerCommunication.findUnique(args);
  }
  async createPeerCommunication(
    args: Prisma.PeerCommunicationCreateArgs
  ): Promise<PrismaPeerCommunication> {
    return this.prisma.peerCommunication.create(args);
  }
  async updatePeerCommunication(
    args: Prisma.PeerCommunicationUpdateArgs
  ): Promise<PrismaPeerCommunication> {
    return this.prisma.peerCommunication.update(args);
  }
  async deletePeerCommunication(
    args: Prisma.PeerCommunicationDeleteArgs
  ): Promise<PrismaPeerCommunication> {
    return this.prisma.peerCommunication.delete(args);
  }
}
