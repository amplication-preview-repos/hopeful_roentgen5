/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FuturePlanning as PrismaFuturePlanning } from "@prisma/client";

export class FuturePlanningServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FuturePlanningCountArgs, "select">
  ): Promise<number> {
    return this.prisma.futurePlanning.count(args);
  }

  async futurePlannings(
    args: Prisma.FuturePlanningFindManyArgs
  ): Promise<PrismaFuturePlanning[]> {
    return this.prisma.futurePlanning.findMany(args);
  }
  async futurePlanning(
    args: Prisma.FuturePlanningFindUniqueArgs
  ): Promise<PrismaFuturePlanning | null> {
    return this.prisma.futurePlanning.findUnique(args);
  }
  async createFuturePlanning(
    args: Prisma.FuturePlanningCreateArgs
  ): Promise<PrismaFuturePlanning> {
    return this.prisma.futurePlanning.create(args);
  }
  async updateFuturePlanning(
    args: Prisma.FuturePlanningUpdateArgs
  ): Promise<PrismaFuturePlanning> {
    return this.prisma.futurePlanning.update(args);
  }
  async deleteFuturePlanning(
    args: Prisma.FuturePlanningDeleteArgs
  ): Promise<PrismaFuturePlanning> {
    return this.prisma.futurePlanning.delete(args);
  }
}
