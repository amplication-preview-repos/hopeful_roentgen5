/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DataTransfer } from "./DataTransfer";
import { DataTransferCountArgs } from "./DataTransferCountArgs";
import { DataTransferFindManyArgs } from "./DataTransferFindManyArgs";
import { DataTransferFindUniqueArgs } from "./DataTransferFindUniqueArgs";
import { CreateDataTransferArgs } from "./CreateDataTransferArgs";
import { UpdateDataTransferArgs } from "./UpdateDataTransferArgs";
import { DeleteDataTransferArgs } from "./DeleteDataTransferArgs";
import { DataTransferService } from "../dataTransfer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DataTransfer)
export class DataTransferResolverBase {
  constructor(
    protected readonly service: DataTransferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DataTransfer",
    action: "read",
    possession: "any",
  })
  async _dataTransfersMeta(
    @graphql.Args() args: DataTransferCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DataTransfer])
  @nestAccessControl.UseRoles({
    resource: "DataTransfer",
    action: "read",
    possession: "any",
  })
  async dataTransfers(
    @graphql.Args() args: DataTransferFindManyArgs
  ): Promise<DataTransfer[]> {
    return this.service.dataTransfers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DataTransfer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DataTransfer",
    action: "read",
    possession: "own",
  })
  async dataTransfer(
    @graphql.Args() args: DataTransferFindUniqueArgs
  ): Promise<DataTransfer | null> {
    const result = await this.service.dataTransfer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DataTransfer)
  @nestAccessControl.UseRoles({
    resource: "DataTransfer",
    action: "create",
    possession: "any",
  })
  async createDataTransfer(
    @graphql.Args() args: CreateDataTransferArgs
  ): Promise<DataTransfer> {
    return await this.service.createDataTransfer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DataTransfer)
  @nestAccessControl.UseRoles({
    resource: "DataTransfer",
    action: "update",
    possession: "any",
  })
  async updateDataTransfer(
    @graphql.Args() args: UpdateDataTransferArgs
  ): Promise<DataTransfer | null> {
    try {
      return await this.service.updateDataTransfer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataTransfer)
  @nestAccessControl.UseRoles({
    resource: "DataTransfer",
    action: "delete",
    possession: "any",
  })
  async deleteDataTransfer(
    @graphql.Args() args: DeleteDataTransferArgs
  ): Promise<DataTransfer | null> {
    try {
      return await this.service.deleteDataTransfer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
