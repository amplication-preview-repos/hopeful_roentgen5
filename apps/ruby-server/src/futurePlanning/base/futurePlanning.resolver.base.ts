/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FuturePlanning } from "./FuturePlanning";
import { FuturePlanningCountArgs } from "./FuturePlanningCountArgs";
import { FuturePlanningFindManyArgs } from "./FuturePlanningFindManyArgs";
import { FuturePlanningFindUniqueArgs } from "./FuturePlanningFindUniqueArgs";
import { CreateFuturePlanningArgs } from "./CreateFuturePlanningArgs";
import { UpdateFuturePlanningArgs } from "./UpdateFuturePlanningArgs";
import { DeleteFuturePlanningArgs } from "./DeleteFuturePlanningArgs";
import { FuturePlanningService } from "../futurePlanning.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FuturePlanning)
export class FuturePlanningResolverBase {
  constructor(
    protected readonly service: FuturePlanningService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FuturePlanning",
    action: "read",
    possession: "any",
  })
  async _futurePlanningsMeta(
    @graphql.Args() args: FuturePlanningCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FuturePlanning])
  @nestAccessControl.UseRoles({
    resource: "FuturePlanning",
    action: "read",
    possession: "any",
  })
  async futurePlannings(
    @graphql.Args() args: FuturePlanningFindManyArgs
  ): Promise<FuturePlanning[]> {
    return this.service.futurePlannings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FuturePlanning, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FuturePlanning",
    action: "read",
    possession: "own",
  })
  async futurePlanning(
    @graphql.Args() args: FuturePlanningFindUniqueArgs
  ): Promise<FuturePlanning | null> {
    const result = await this.service.futurePlanning(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FuturePlanning)
  @nestAccessControl.UseRoles({
    resource: "FuturePlanning",
    action: "create",
    possession: "any",
  })
  async createFuturePlanning(
    @graphql.Args() args: CreateFuturePlanningArgs
  ): Promise<FuturePlanning> {
    return await this.service.createFuturePlanning({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FuturePlanning)
  @nestAccessControl.UseRoles({
    resource: "FuturePlanning",
    action: "update",
    possession: "any",
  })
  async updateFuturePlanning(
    @graphql.Args() args: UpdateFuturePlanningArgs
  ): Promise<FuturePlanning | null> {
    try {
      return await this.service.updateFuturePlanning({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FuturePlanning)
  @nestAccessControl.UseRoles({
    resource: "FuturePlanning",
    action: "delete",
    possession: "any",
  })
  async deleteFuturePlanning(
    @graphql.Args() args: DeleteFuturePlanningArgs
  ): Promise<FuturePlanning | null> {
    try {
      return await this.service.deleteFuturePlanning(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
