/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Documentation } from "./Documentation";
import { DocumentationCountArgs } from "./DocumentationCountArgs";
import { DocumentationFindManyArgs } from "./DocumentationFindManyArgs";
import { DocumentationFindUniqueArgs } from "./DocumentationFindUniqueArgs";
import { CreateDocumentationArgs } from "./CreateDocumentationArgs";
import { UpdateDocumentationArgs } from "./UpdateDocumentationArgs";
import { DeleteDocumentationArgs } from "./DeleteDocumentationArgs";
import { DocumentationService } from "../documentation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Documentation)
export class DocumentationResolverBase {
  constructor(
    protected readonly service: DocumentationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Documentation",
    action: "read",
    possession: "any",
  })
  async _documentationsMeta(
    @graphql.Args() args: DocumentationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Documentation])
  @nestAccessControl.UseRoles({
    resource: "Documentation",
    action: "read",
    possession: "any",
  })
  async documentations(
    @graphql.Args() args: DocumentationFindManyArgs
  ): Promise<Documentation[]> {
    return this.service.documentations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Documentation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Documentation",
    action: "read",
    possession: "own",
  })
  async documentation(
    @graphql.Args() args: DocumentationFindUniqueArgs
  ): Promise<Documentation | null> {
    const result = await this.service.documentation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Documentation)
  @nestAccessControl.UseRoles({
    resource: "Documentation",
    action: "create",
    possession: "any",
  })
  async createDocumentation(
    @graphql.Args() args: CreateDocumentationArgs
  ): Promise<Documentation> {
    return await this.service.createDocumentation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Documentation)
  @nestAccessControl.UseRoles({
    resource: "Documentation",
    action: "update",
    possession: "any",
  })
  async updateDocumentation(
    @graphql.Args() args: UpdateDocumentationArgs
  ): Promise<Documentation | null> {
    try {
      return await this.service.updateDocumentation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Documentation)
  @nestAccessControl.UseRoles({
    resource: "Documentation",
    action: "delete",
    possession: "any",
  })
  async deleteDocumentation(
    @graphql.Args() args: DeleteDocumentationArgs
  ): Promise<Documentation | null> {
    try {
      return await this.service.deleteDocumentation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
