/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DataTransfer as PrismaDataTransfer } from "@prisma/client";

export class DataTransferServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataTransferCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataTransfer.count(args);
  }

  async dataTransfers(
    args: Prisma.DataTransferFindManyArgs
  ): Promise<PrismaDataTransfer[]> {
    return this.prisma.dataTransfer.findMany(args);
  }
  async dataTransfer(
    args: Prisma.DataTransferFindUniqueArgs
  ): Promise<PrismaDataTransfer | null> {
    return this.prisma.dataTransfer.findUnique(args);
  }
  async createDataTransfer(
    args: Prisma.DataTransferCreateArgs
  ): Promise<PrismaDataTransfer> {
    return this.prisma.dataTransfer.create(args);
  }
  async updateDataTransfer(
    args: Prisma.DataTransferUpdateArgs
  ): Promise<PrismaDataTransfer> {
    return this.prisma.dataTransfer.update(args);
  }
  async deleteDataTransfer(
    args: Prisma.DataTransferDeleteArgs
  ): Promise<PrismaDataTransfer> {
    return this.prisma.dataTransfer.delete(args);
  }
}
