/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Blockchain as PrismaBlockchain } from "@prisma/client";

export class BlockchainServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlockchainCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blockchain.count(args);
  }

  async blockchains(
    args: Prisma.BlockchainFindManyArgs
  ): Promise<PrismaBlockchain[]> {
    return this.prisma.blockchain.findMany(args);
  }
  async blockchain(
    args: Prisma.BlockchainFindUniqueArgs
  ): Promise<PrismaBlockchain | null> {
    return this.prisma.blockchain.findUnique(args);
  }
  async createBlockchain(
    args: Prisma.BlockchainCreateArgs
  ): Promise<PrismaBlockchain> {
    return this.prisma.blockchain.create(args);
  }
  async updateBlockchain(
    args: Prisma.BlockchainUpdateArgs
  ): Promise<PrismaBlockchain> {
    return this.prisma.blockchain.update(args);
  }
  async deleteBlockchain(
    args: Prisma.BlockchainDeleteArgs
  ): Promise<PrismaBlockchain> {
    return this.prisma.blockchain.delete(args);
  }
}
